#include "reactiveLayer.h"

bool ReactiveLayer::configure(yarp::os::ResourceFinder &rf)
{
    string moduleName = rf.check("name",Value("ReactiveLayer")).asString().c_str();
    setName(moduleName.c_str());

    cout<<moduleName<<": finding configuration files..."<<endl;
    period = rf.check("period",Value(0.1)).asDouble();

    //Create an iCub Client and check that all dependencies are here before starting
    bool isRFVerbose = false;
    iCub = new ICubClient(moduleName,"reactiveLayer","client.ini",isRFVerbose);
    iCub->opc->isVerbose = false;
    char rep = 'n';
    while (rep!='y'&&!iCub->connect())
    {
        cout<<"iCubClient : Some dependencies are not running..."<<endl;
        //cout<<"Continue? y,n"<<endl;
        //cin>>rep;
        break; //to debug
        Time::delay(1.0);
    }

    //Set the voice
    std::string ttsOptions = rf.check("ttsOptions", yarp::os::Value("iCubina 85.0")).asString();
    if (iCub->getSpeechClient())
        iCub->getSpeechClient()->SetOptions(ttsOptions);

    //Configure the various components
	configureOPC(rf);
	configureAllostatic(rf);
/*
	configureTactile(rf);
	configureSalutation(rf);
*/
    cout<<"Configuration done."<<endl;

    rpc.open ( ("/"+moduleName+"/rpc").c_str());
    attach(rpc);

	//Initialise timers

    lastFaceUpdate = Time::now();
/*	physicalInteraction = false;
	someonePresent = false;
*/
    return true;
}

void ReactiveLayer::configureAllostatic(yarp::os::ResourceFinder &rf)
{
	//Initialise the iCub allostatic model
	cout << "Initializing drives";
	Bottle grpAllostatic = rf.findGroup("ALLOSTATIC");
	Bottle *drivesList = grpAllostatic.find("drives").asList();
	iCub->icubAgent->m_drives.clear();
	if (drivesList)
	{
		for (int d = 0; d<drivesList->size(); d++)
		{
			string driveName = drivesList->get(d).asString().c_str();
			Drive drv;
			drv.name = driveName;
			drv.homeoStasisMin = grpAllostatic.check((driveName + "-homeostasisMin").c_str(), Value(0.25)).asDouble();
			drv.homeoStasisMax = grpAllostatic.check((driveName + "-homeostasisMax").c_str(), Value(0.75)).asDouble();
			drv.decay = grpAllostatic.check((driveName + "-decay").c_str(), Value(0.05)).asDouble();
			drv.value = (drv.homeoStasisMax + drv.homeoStasisMin) / 2.0;
			iCub->icubAgent->m_drives[driveName] = drv;

			//Under effects
			StimulusEmotionalResponse responseUnder;
			Bottle * bSentences = grpAllostatic.find((driveName + "-under-sentences").c_str()).asList();
			for (int s = 0; bSentences && s<bSentences->size(); s++)
			{
				responseUnder.m_sentences.push_back(bSentences->get(s).asString().c_str());
			}
			Bottle *bChore = grpAllostatic.find((driveName + "-under-chore").c_str()).asList();
			for (int sC = 0; bChore && sC<bChore->size(); sC++)
			{
				responseUnder.m_choregraphies.push_back(bChore->get(sC).asString().c_str());
			}
			homeostaticUnderEffects[driveName] = responseUnder;

			//Over effects
			StimulusEmotionalResponse responseOver;
			bSentences = grpAllostatic.find((driveName + "-over-sentences").c_str()).asList();
			for (int s = 0; bSentences&& s<bSentences->size(); s++)
			{
				responseOver.m_sentences.push_back(bSentences->get(s).asString().c_str());
			}
			bChore = grpAllostatic.find((driveName + "-over-chore").c_str()).asList();
			for (int sC = 0; bChore && sC<bChore->size(); sC++)
			{
				responseOver.m_choregraphies.push_back(bChore->get(sC).asString().c_str());
			}
			homeostaticOverEffects[driveName] = responseOver;
		}
	}
	cout << "done" << endl;

	//Initialise the iCub emotional model
	cout << "Initializing emotions...";
	Bottle grpEmotions = rf.findGroup("EMOTIONS");
	Bottle *emotionsList = grpEmotions.find("emotions").asList();
	double emotionalDecay = grpEmotions.check("emotionalDecay", Value(0.1)).asDouble();

	iCub->icubAgent->m_emotions_intrinsic.clear();
	if (emotionsList)
	{
		for (int d = 0; d<emotionsList->size(); d++)
		{
			string emoName = emotionsList->get(d).asString().c_str();
			iCub->icubAgent->m_emotions_intrinsic[emoName] = 0.0;
		}
	}
	cout << "done" << endl;

	faceUpdatePeriod = grpEmotions.check("expressionUpdatePeriod", Value(0.5)).asDouble();

	cout << "Commiting iCubAgent...";
	iCub->commitAgent();
	cout << "done." << endl;

	InternalVariablesDecay* decayThread;
	decayThread = new InternalVariablesDecay(500, emotionalDecay);
	decayThread->start();
}

bool ReactiveLayer::updateModule()
{
    cout<<".";

	updateAllostatic();
	updateEmotions();
    return true;
}


bool ReactiveLayer::updateAllostatic()
{
	iCub->updateAgent();

	//Update some specific drives based on the previous stimuli encountered
	if (physicalInteraction)
		iCub->icubAgent->m_drives["physicalInteraction"].value += 0.1;
	if (someonePresent)
		iCub->icubAgent->m_drives["socialInteraction"].value += iCub->icubAgent->m_drives["socialInteraction"].decay * 2;

	//Trigger drive related sentences
	for (map<string, Drive>::iterator d = iCub->icubAgent->m_drives.begin(); d != iCub->icubAgent->m_drives.end(); d++)
	{
		//Check under homeostasis
		if (d->second.value < d->second.homeoStasisMin)
		{
			iCub->say(homeostaticUnderEffects[d->first].getRandomSentence());
			d->second.value += (d->second.homeoStasisMax - d->second.homeoStasisMin) / 3.0;
		}
		//Check over homeostasis
		if (d->second.value > d->second.homeoStasisMax)
		{
			iCub->say(homeostaticOverEffects[d->first].getRandomSentence());
			d->second.value -= (d->second.homeoStasisMax - d->second.homeoStasisMin) / 3.0;;
		}
	}
	iCub->commitAgent();
	return true;
}

bool ReactiveLayer::updateEmotions()
{
	//Expresses the maximum emotion
	string maxEmotion; double emotionalValue;
	iCub->getHighestEmotion(maxEmotion, emotionalValue);
	if (lastFaceUpdate + faceUpdatePeriod<Time::now())
	{
		iCub->getExpressionClient()->express(maxEmotion, emotionalValue);
		lastFaceUpdate = Time::now();
		//cout<<"Expressing "<<maxEmotion<<" at "<<emotionalValue<<endl;
	}
	return true;
}

void ReactiveLayer::configureOPC(yarp::os::ResourceFinder &rf)
{
    //Populate the OPC if required
    cout<<"Populating OPC";
    Bottle grpOPC = rf.findGroup("OPC");
    bool shouldPopulate = grpOPC.find("populateOPC").asInt() == 1;
    if (shouldPopulate)
    {
        Bottle *agentList = grpOPC.find("agent").asList();
        if (agentList)
        {
            for(int d=0; d<agentList->size(); d++)
            {
                string name = agentList->get(d).asString().c_str();
                Agent* agent = iCub->opc->addAgent(name);
                agent->m_present = false;
                iCub->opc->commit(agent);
            }
        }

        Bottle *objectList = grpOPC.find("object").asList();
        if (objectList)
        {
            for(int d=0; d<objectList->size(); d++)
            {
                string name = objectList->get(d).asString().c_str();
                Object* o = iCub->opc->addObject(name);
                o->m_present = false;
                iCub->opc->commit(o);
            }
        }

        Bottle *rtobjectList = grpOPC.find("rtobject").asList();
        if (rtobjectList)
        {
            for(int d=0; d<rtobjectList->size(); d++)
            {
                string name = rtobjectList->get(d).asString().c_str();
                RTObject* o = iCub->opc->addRTObject(name);
                o->m_present = false;
                iCub->opc->commit(o);
            }
        }

        Bottle *adjectiveList = grpOPC.find("adjective").asList();
        if (adjectiveList)
        {
            for(int d=0; d<adjectiveList->size(); d++)
            {
                string name = adjectiveList->get(d).asString().c_str();
                iCub->opc->addAdjective(name);
            }
        }

        Bottle *actionList = grpOPC.find("action").asList();
        if (actionList)
        {
            for(int d=0; d<actionList->size(); d++)
            {
                string name = actionList->get(d).asString().c_str();
                iCub->opc->addAction(name);
            }
        }
    }
    cout<<"done"<<endl;
}


bool ReactiveLayer::respond(const Bottle& cmd, Bottle& reply)
{
	reply.addString("NACK");
    return true;
}
